# Rolodink Project - Cursor Rules

## üéØ Project Overview
This is a LinkedIn CRM extension project with a Next.js website and browser extension. We use GitHub Flow for version control and follow modern development practices.

## üå≥ Branch Strategy (GitHub Flow)
- **main**: Production branch (always deployable)
- **feature/description**: New features
- **fix/description**: Bug fixes
- **hotfix/description**: Urgent production fixes
- **docs/description**: Documentation updates

## üöÄ Development Workflow

### Starting New Work
```bash
# Always start from main
git checkout main
git pull origin main
git checkout -b feature/your-feature-name
```

### Commit Messages
Use conventional commits format:
```
type(scope): description

feat(auth): add OAuth2 integration
fix(ui): resolve button alignment issue
docs(readme): update installation instructions
```

### Pull Request Process
1. Create PR from feature branch to main
2. Fill out PR template completely
3. Request appropriate reviewers
4. Wait for approval + CI checks
5. Squash and merge

## üèóÔ∏è Project Structure

### Website (`/website/`)
- **Framework**: Next.js 15.4.7 with App Router
- **Styling**: Tailwind CSS v4 + shadcn/ui components
- **Fonts**: Playfair Display (headings), Inter (body)
- **Deployment**: Vercel

### Extension (`/linkedin-crm-extension/`)
- **Framework**: React + Vite
- **Purpose**: LinkedIn CRM functionality
- **Distribution**: Chrome Web Store, Firefox AMO, Edge Add-ons

### Backend (`/linkedin-crm-backend/`)
- **Framework**: Next.js API routes
- **Database**: Prisma with SQLite
- **Deployment**: Vercel

## üé® Design System

### Colors
- Primary: `azure: #1B2951`
- Background: `background: #F7F5F0`
- Accent: `gold: #B8860B`
- LinkedIn: `linkBlue: #0066CC`
- Text: `grey: #525252`

### Typography
- Headings: `font-playfair font-semibold`
- Body: Inter (default sans-serif)
- Sizes: `text-5xl` (headings), `text-xl` (subheadings), `text-sm` (body)

### Spacing
- Section padding: `py-24 px-8`
- Container: `max-w-[1136px] mx-auto` (large), `max-w-[768px] mx-auto` (prose)
- Gap: `space-y-16` (sections), `space-y-4` (within sections)

## üß© Component Guidelines

### React Components
- Use TypeScript for all components
- Prefer functional components with hooks
- Use proper prop types and interfaces
- Follow shadcn/ui patterns for UI components

### Next.js Pages
- Use App Router structure
- Implement proper SEO metadata
- Use server components by default
- Add "use client" only when needed

### Styling
- Use Tailwind CSS utilities
- Follow design system tokens
- Use shadcn/ui components when possible
- Maintain responsive design

## üîí Security Best Practices

### Secret Management
- **Never commit secrets** to the repository (API keys, passwords, tokens, credentials)
- Use GitHub Secrets for CI/CD credentials (not in code)
- Store secrets in `.env` files (already gitignored)
- TruffleHog automatically scans all commits and PRs - will catch mistakes
- Pre-commit hook scans locally before commits (optional but recommended)
- Rotate secrets immediately if accidentally exposed

### Security Scanning
- **Automatic**: GitHub Actions runs TruffleHog on every push and PR
- **Local**: Pre-commit hook available (see `docs/SECRET_SCANNING.md`)
- **Result**: Workflow fails if secrets detected, blocking merges
- **Coverage**: Scans entire git history, not just current files

**If secrets are found:**
1. Rotate the secret immediately (assume compromised)
2. Remove from git history
3. Update GitHub Secrets
4. See `docs/SECRET_SCANNING.md` for remediation steps

### Rate Limiting
- **CRITICAL**: All API routes must have rate limiting (100 req/hour per IP)
- Use `rateLimitMiddleware` from `@/lib/rate-limit` on all `/api/*` routes
- Prevents bot abuse and protects against excessive API costs
- Test rate limits before deploying: verify 429 responses after limit

### Row-Level Security (RLS)
- **CRITICAL**: All user data tables must have RLS enabled
- Connection and Note tables use RLS policies based on `auth.uid()`
- Test RLS policies before deploying: ensure users can't access others' data
- See `docs/RLS_SETUP.md` for setup instructions
- Run `prisma/migrations/enable_rls.sql` in Supabase before production

### API Key Security
- **NEVER** hardcode API keys, secrets, or credentials in source code
- **ALWAYS** use environment variables (`.env.local` for development)
- Move ALL secrets to environment variables immediately if found hardcoded
- Update `.gitignore` to ensure secrets are never committed
- Provide `.env.example` files showing required variables (without actual values)

### Dependency Security
- Run `npm audit` regularly (automated in CI/CD)
- Fix critical and high severity vulnerabilities before merging
- Review `npm audit` output in GitHub Actions workflows
- Update dependencies regularly to patch security issues

### Authentication Security
- Verify OAuth flow is secure (Supabase OAuth is already secure)
- **NEVER** store credentials in localStorage (use secure storage like chrome.storage.local)
- Verify CORS headers are properly configured (no wildcards in production)
- Test authentication: sign in/out should work securely

### Security Testing
- Test rate limiting: make >100 requests, verify 429 response
- Test RLS: attempt to access another user's data, should fail
- Test authentication: verify tokens are validated on every request
- Review security logs regularly for suspicious activity

## üîß Code Quality Standards

### TypeScript
- Strict mode enabled
- No `any` types without justification
- Proper interface definitions
- Use type guards and assertions carefully

### Testing
- Write unit tests for utilities
- Test component behavior
- Use React Testing Library
- Maintain test coverage > 80%

### Performance
- Use Next.js Image component
- Implement proper loading states
- Optimize bundle size
- Use dynamic imports when appropriate

### Accessibility
- Use semantic HTML
- Implement proper ARIA labels
- Ensure keyboard navigation
- Test with screen readers

## üö® Common Issues & Solutions

### Build Errors
- Check TypeScript errors first
- Verify all imports are correct
- Ensure dependencies are installed
- Check Tailwind CSS configuration

### Deployment Issues
- Verify Vercel configuration
- Check environment variables
- Ensure build commands are correct
- Review deployment logs

### Extension Issues
- Check manifest.json syntax
- Verify content script selectors
- Test in different browsers
- Check permissions and APIs

## üìö Documentation Standards

### Code Comments
- Explain complex logic
- Document public APIs
- Use JSDoc for functions
- Keep comments up to date

### README Files
- Include setup instructions
- Document environment variables
- Provide usage examples
- Keep installation steps current

### API Documentation
- Document all endpoints
- Include request/response examples
- Specify error codes
- Update when APIs change

## üîÑ Git Best Practices

### Branch Management
- Delete merged branches
- Keep feature branches small
- Use descriptive names
- Don't commit to main directly

### Commit History
- Make atomic commits
- Write clear messages
- Squash related commits
- Avoid merge commits in feature branches

### Pull Requests
- Keep PRs focused and small
- Write descriptive titles
- Fill out templates completely
- Request appropriate reviewers

## üõ†Ô∏è Development Tools

### Required Tools
- Node.js 18+
- npm 9+
- Git
- VS Code with Cursor
- Browser dev tools

### Recommended Extensions
- TypeScript Hero
- Tailwind CSS IntelliSense
- GitLens
- Prettier
- ESLint

### Environment Setup
```bash
# Install dependencies
npm install

# Start development server
npm run dev

# Build for production
npm run build

# Run tests
npm test
```

## üöÄ Deployment Process

### Website
- Automatic deployment from main branch
- Vercel handles build and deployment
- Environment variables in Vercel dashboard
- Custom domain: rolodink.app

### Extension
- Automated publishing via GitHub Actions (see Extension Publishing Guide below)
- Chrome Web Store, Firefox AMO, Edge Add-ons
- Version bumping required
- Store listings updated

## üÜò Getting Help

### Documentation
- Check this file first
- Review GitHub Flow guide
- Read component documentation
- Check existing issues

### Team Communication
- Use GitHub Discussions for questions
- Create issues for bugs/features
- Use PR comments for code review
- Tag relevant team members

### Emergency Procedures
- Rollback via git revert
- Use hotfix branches for urgent fixes
- Document all emergency changes
- Communicate with team

## üìã Checklist for New Features

- [ ] Create feature branch from main
- [ ] Implement feature with tests
- [ ] Update documentation
- [ ] Create pull request
- [ ] Get code review
- [ ] Merge to main
- [ ] Deploy to production
- [ ] Monitor for issues

## üéØ Success Metrics

### Code Quality
- Zero TypeScript errors
- All tests passing
- No console errors
- Good performance scores

### Process Quality
- All PRs reviewed
- Clear commit messages
- Updated documentation
- Successful deployments

---

## üì¶ Rolodink Extension Publishing Guide

### Release Process

To publish a new version of Rolodink to all stores:

1. **Update version in package.json**
   - Update `linkedin-crm-extension/package.json`: `"version": "1.0.X"`
   - Also update `manifest.json` and `manifest-firefox.json` version fields

2. **Commit changes:**
   ```bash
   git add .
   git commit -m "Release v1.0.X"
   ```

3. **Create and push tag:**
   ```bash
   git tag -a ext-v1.0.X -m "Release Rolodink v1.0.X"
   git push origin ext-v1.0.X
   ```

### Automated Workflows

GitHub Actions automatically triggered by tags matching `ext-v*`:

- **Firefox**: Signs with `web-ext` and publishes to AMO (3-7 days review)
- **Chrome**: Publishes to Chrome Web Store (24-48 hours review)
- **Edge**: Placeholder workflow; manual upload required (see `docs/EDGE_UPLOAD_INSTRUCTIONS.md`)

### Required Secrets

All secrets must be configured in **GitHub Settings ‚Üí Secrets ‚Üí Actions**:

- `FIREFOX_JWT_ISSUER`
- `FIREFOX_JWT_SECRET`
- `CHROME_CLIENT_ID`
- `CHROME_CLIENT_SECRET`
- `CHROME_REFRESH_TOKEN`
- `CHROME_EXTENSION_ID`

### Documentation

- `docs/GITHUB_ACTIONS_SETUP.md`: Complete setup guide
- `docs/FIREFOX_PUBLISHING.md`: Firefox-specific details
- `docs/CHROME_UPLOAD_INSTRUCTIONS.md`: Chrome manual upload
- `docs/EDGE_UPLOAD_INSTRUCTIONS.md`: Edge manual upload

### Important Notes

- **Tag format must be `ext-vX.Y.Z`** (not `vX.Y.Z`)
- **Version in package.json must match tag version**
- **Check GitHub Actions tab** for workflow status
- **Monitor store dashboards** for review progress

### Next Steps (Future)

- Edge automation when better API tooling available

---

**Remember**: These rules are guidelines. When in doubt, ask for help or clarification. The goal is to maintain code quality while enabling productive development.
